#include <iostream>
#include <string>
using namespace std;

struct Node
{
    int prn;
    string name;
    Node *next;

    Node(int p, string n) : prn(p), name(n), next(nullptr) {}
};

class PinnacleClub
{
private:
    Node *head;
    Node *tail;

public:
    PinnacleClub() : head(nullptr),tail(nullptr) {}

    void addMember(int prn, string name, bool isPresident = false, bool isSecretary = false)
    {
        Node *newMember = new Node(prn, name);

        if (isPresident)
        {
            newMember->next=head;
            head=newMember;
            if (tail==nullptr) // If list was empty, set tail to head
                tail=head;
        }
        else if (isSecretary)
        {
            if (tail==nullptr)
            { // If the list is empty
                head=tail=newMember;
            }
            else
            {
                tail->next=newMember;
                tail=newMember;
            }
        }
        else
        {
            if (head==nullptr)
            {
                head=tail=newMember;
            }
            else
            {
                newMember->next=head->next;
                head->next=newMember;
            }
        }
    }

    void deleteMember(int prn)
    {
        if (head==nullptr)
        {
            cout<<"The list is empty.\n";
            return;
        }

        if (head->prn==prn)
        {
            Node *temp=head;
            head=head->next;
            delete temp;
            if (head==nullptr)
                tail=nullptr;
            cout<<"President removed.\n";
            return;
        }

        if (tail->prn==prn)
        {
            Node *temp=head;
            while (temp->next!=tail)
            {
                temp=temp->next;
            }
            delete tail;
            tail=temp;
            tail->next = nullptr;
            cout<<"Secretary removed.\n";
            return;
        }

        Node *current=head;
        while (current->next!=nullptr && current->next->prn != prn)
        {
            current = current->next;
        }

        if (current->next == nullptr)
        {
            cout << "Member not found.\n";
        }
        else
        {
            Node *temp = current->next;
            current->next = temp->next;
            delete temp;
            cout << "Member removed.\n";
        }
    }

    int countMembers() const
    {
        int count = 0;
        Node *temp = head;
        while (temp != nullptr)
        {
            count++;
            temp = temp->next;
        }
        return count;
    }

    void displayMembers() const
    {
        if (head == nullptr)
        {
            cout << "The list is empty.\n";
            return;
        }

        Node *temp = head;
        cout << "Club Members:\n";
        while (temp != nullptr)
        {
            cout << temp->prn << " - " << temp->name << endl;
            temp = temp->next;
        }
    }

    void concatenate(PinnacleClub &other)
    {
        if (head == nullptr)
        {
            head = other.head;
            tail = other.tail;
        }
        else if (other.head != nullptr)
        {
            tail->next = other.head;
            tail = other.tail;
        }

        other.head = nullptr;
        other.tail = nullptr;
    }

    ~PinnacleClub()
    {
        Node *temp;
        while (head != nullptr)
        {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main()
{
    PinnacleClub divA, divB;

    int choice, prn;
    string name;

    while (true)
    {
        cout << "\n--- Pinnacle Club Menu ---\n";
        cout << "1. Add President\n2. Add Secretary\n3. Add Member\n4. Delete Member\n";
        cout << "5. Display Members\n6. Count Members\n7. Concatenate Divisions\n8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter President's PRN: ";
            cin >> prn;
            cout << "Enter President's Name: ";
            cin.ignore();
            getline(cin, name);
            divA.addMember(prn, name, true, false);
            break;

        case 2:
            cout << "Enter Secretary's PRN: ";
            cin >> prn;
            cout << "Enter Secretary's Name: ";
            cin.ignore();
            getline(cin, name);
            divA.addMember(prn, name, false, true);
            break;

        case 3:
            cout << "Enter Member's PRN: ";
            cin >> prn;
            cout << "Enter Member's Name: ";
            cin.ignore();
            getline(cin, name);
            divA.addMember(prn, name);
            break;

        case 4:
            cout << "Enter PRN of member to delete: ";
            cin >> prn;
            divA.deleteMember(prn);
            break;

        case 5:
            divA.displayMembers();
            break;

        case 6:
            cout << "Total Members: " << divA.countMembers() << endl;
            break;

        case 7:
            cout << "Enter members of Division B (PRN and Name, -1 to stop):\n";
            while (true)
            {
                cout << "Enter PRN (-1 to stop): ";
                cin >> prn;
                if (prn == -1)
                    break;
                cout << "Enter Name: ";
                cin.ignore();
                getline(cin, name);
                divB.addMember(prn, name);
            }
            divA.concatenate(divB);
            cout << "Divisions concatenated successfully.\n";
            break;

        case 8:
            cout << "Exiting program.\n";
            return 0;

        default:
            cout << "Invalid choice! Please try again.\n";
        }
    }
}
